.TH jabber.xml 5 "13 Nov 2006" "@VERSION@" "jabberd14 project"
.SH NAME
jabber.xml \- jabberd daemon configuration file
.SH SYNOPSIS
The jabber daemon jabberd is configured by an XML configuration file. By
default jabberd will read \fI@sysconfdir@/jabber.xml\fR. The \fB-c\fR
command line option can be used to specify an alternate configuration file.
.SH "FILE FORMAT"
The configuration file has to be a valid XML document preferably in the
UTF-8 charset (ASCII is valid subset of UTF-8).

Within the following xpath expressions, the following namespace prefixes
are used:

default namespace: "jabber:server",
browse: "jabber:iq:browse",
cfg: "http://jabberd.org/ns/configfile",
register: "jabber:iq:register",
vcard: "vcard-temp",
.TP
.B <jabber/>
This is the root element of the configuration file.
.TP
.B <service/>
This element is an immediate child element of the <jabber/> root element.
It defines a general purpose component in the jabber daemon. The jabber daemon
will route all stanzas to this component that have a domain part in the
destination JID that equals the id attribute or any defined additional
domains this component is responsible for using the <host/> child element.
An implementation or relation to an other process is defined using one of the
following child elements: <accept/>, <connect/>, <dynamic/>, <exec/>, <load/>,
<null/>. Any child elements in own namespaces are ignored by the core
jabberd and can be used by components to store their own configuration.
.TP
.B <xdb/>
This element is an immediate child element of the <jabber/> root element.
It defines a component in the jabber daemon, that is responsible for XML
data storage. This components internal address is defined by the id
attribute. The <host/> child elements define for which domains this storage
component is managing the data. An empty <host/> element defines, that it
is responsible for all components. With the <ns/> child element you can
limit the responsibility to XML chunks in a given set of namespaces. You
can then for example define one storage component that handles rosters and
an other that handles offline message storage.
An implementation or relation to an other process is defined using on of the
following child elements: <accept/>, <connect/>, <dynamic/>, <exec/>, <load/>,
<null/>. Any child elements in own namespaces are ignored by the core jabberd
and can be used by components to store their own configuration.
.TP
.B <log/>
This element is an immediate child element of the <jabber/> root element.
It defines a component in the jabber daemon, that acts as a logging sink.
This components internal address is defined by the id attribute. The <host/>
child elements define for which domains this logging sink is logging messages.
An empty <host/> element defines, that it is responsible for all components.
With the <logtype/> child element you can select the types of messages, that
are handled by this component.
Where to write the logging information is defined with one of the following
child elements: <file/>, <stderr/>, <stdout/>, <to/>.
With the <format/> child element you define the format of the logged message.
.TP
.B <io/>
This element is an immediate child element of the <jabber/> root element.
In this section of the configuration file you can define different settings
that are related to the network I/O layer. This includes bandwidth limitations
(using the <karma/> element), assigning X.509 certificates to sockets (using
the <ssl/> element), and to limit access to the server to specific IP address
ranges (using the <allow/> and <deny/> elements).
.TP
.B <pidfile/>
This element specifies to which file the server should write its process ID.
If this file already exists when the server is started, it will fail. You
have to remove stale pidfiles before starting the server yourself. If you
omit this element, the server will not write nor check any pidfile.
.TP
.B <debug/>
This element contains configuration settings controlling the output of
debugging messages. These settings can be changed at server runtime, the
server will reread them on receiving a SIGHUP signal.
.TP
The following elements are used inside the <service/>, <xdb/>, and <log/>
elements, that are defining components. They are used to provide the jabberd
process with information where it can find the component's implementation.
.TP
.B <load/>
This element can be used inside any component definition. It specifies, that
the implementation of the component can be found inside a shared object. Any
child element of this element defines a shared object file and a method in
this object. jabberd will load the shared object files which locations
are defined in the cdata elements inside the child elements, the names of the
elements are defining the functions that have to be called. An optional
main attribute in the <load/> element define the main function in a component,
that has to be used to initialize it.
.TP
.B <accept/>
This element defines, that jabberd will wait for an incoming connection using
the jabber:component:accept protocol defined in XEP-0114. With this it is
possible to run components in their own process, even on different hosts
and connect it to the main jabberd routing process. On the other end of the
connection there can be an instance of jabberd again that uses a section
with <connect/> to initiate the connection, but there are libraries in many
programming languages available, that implement XEP-0114 as well.
Inside this element you have to provide an <ip/> element, that defines the
IPv4 or IPv6 address to listen on, a <port/> element that defines on which
port the server will listen for the connection, and a <secret/> element, that
defines a shared secret to authenticate the other peer.
.TP
.B <connect/>
This element is the opposite of the <accept/> element. Jabberd will try to
connect to an implementation of the jabber:component:accept protocol defined
in XEP-0114.
Inside this element you have to provide an <ip/> element, that defines the
IPv4 or IPv6 address where to connect to, a <port/> element, that defines
the destination port, and a <secret/> element, that defines a shared secret
to authenticate to the other peer.
.TP
.B <file/>
This element can only be used inside a <log/> section. It is used to specify
that log messages should be appended to a text file.
.TP
.B <null/>
This element specifies an empty component. Everything that is sent to a JabberID
with the domain part of this component is silently discarded. It can be used
to drop stanzas directed to entities on the Jabber network, that have
disappeared (e.g. update.jabber.org).
.TP
.B <stderr/>
This element can only be used inside a <log/> section. It is used to specify
that log messages should be written to the standard error output stream.
.TP
.B <stdout/>
This element is used to define, that the jabberd process is communicating
with the process, that is implementing the component. It is the opposite
of <exec/>. A process that is started by <exec/> in an other process can
use <stdout/> to implement the other end of the connecting pipe.
.TP
.B <syslog/>
This element can only be used inside a <log/> section. It is used to specify
that log messages should be written to the syslog.
.TP
.B <to/>
This element can only be used inside a <log/> section. It is used to
reformat log packets as messages and resend them to an entity with the
given JabberID. The JabberID is given as cdata child element.
.TP
.B <unsubscribe/>
This element can only be used inside a <service/> section. It is used
to bounce messages and iq queries and send unsubscribes to presences, that
are received. It is intended to be used as a replacement for transports,
that are removed from a server. It will remove the roster items of this
transport from the users' rosters.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/browse:browse
List of services, that should be returned as the result of a browsing or
a service discovery request. The format is as in a browse result stanza.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/disco-info:disco/disco-info:identity
Name of the Jabber server, that should be returned in a service discovery reply.
If this is not configured, the FN field of the server's vCard
(cfg:jabber/cfg:service/jsm:jsm/vcard:vCard/vcard:FN) is used.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:admin/reply
Message, that should be returned to someone, that has sent a message to the
servers address. (These messages are forwarded to all users having the 'adminmsg'
ACL right.)
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:agents
This configuration setting can contain a response of a iq get query
in the jabber:iq:agents namespace. Using this is deprecated. You should
not use this configuration setting. The jabber:iq:agents namespace is
superseded by service discovery.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:archive
Configure the JabberIDs where mod_log should send messages about created
sessions to. The JabberIDs should be enclosed in a <service/> element.
Multiple <service/> elements can be placed inside the <archive/> element.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:auth
Redirect authentication handling (non-SASL only) to a component. The
address of the component has to be given as the textual content of this
configuration element. No default setting.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:history
With this element, the session manager can be configured to send copies
of received and sent messages to xdb. This can be used for logging or
to implement web-based access to the message history. The history element
contains two child elements: sent and recv. The sent element configures
how messages sent by a user are handled. The recv element configures how
messages received by a user are handled.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:maxusers
The maximum number of users the server should expect per domain (more users
will get handled, but it may have performance impacts). A prime number
should be configured here. The default setting is 3001.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:mod_auth_crypt/jsm:hash
The default password hashing algorithm used by mod_auth_crypt is crypt().
With this setting you can select other algorithms by adding their name as
the text inside this element. Currently the only other algorithm supported
by mod_auth_crypt is "SHA1". It is not recommended to use mod_auth_crypt.
With hashed passwords, you get problems when you want to migrate to
SASL authentication.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:mod_offline
With this it can be configured which messages are stored offline. The default
is to only store normal and chat messages offline (bouncing headline and
groupchat messages, dropping error messages). If the mod_offline element is
present, only message types present in this element are stored offline.
Use the following element names inside this element: <normal/>, <chat/>,
<headline/>, <groupchat/>, and <error/>.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:mod_useridpolicy
Define a policy for usernames, that should be enforced on account
registration (i.e. already registered usernames are not affected). It is
possible to block accounts from being registered based on special names
(put the username inside a <forbidden/> element, e.g.
<forbidden>root</forbidden>) or enforce length constraints on the
username by defining a minimum and/or maximum length of the username
in unicode characters (put the setting inside <minlen/> and <maxlen/>
elements, e.g. <minlen>3</minlen>).
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:mod_version
Modify the result to a jabber:iq:version request. With the <name/> element
inside this configuration option, you can replace the product name, that
is returned by the server. With the <version/> element, you can replace
the returned product version. With the <os/> element, you can replace
the operating system identification returned by mod_version. With the
<no_os_version/> element, you can configured mod_version to return the
name of the operating system, but not its version number.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:presence
This configuration option can include two different elements: With the
<presence2xdb/> element you configure jabberd14 to store all presences
of the local users to xdb. Used together with xdb_sql this can be used
to have the presence of your users in a SQL database, e.g. to use it
to display web status indicators. (Please recognize the privacy issues
with web indicators if you plan to implement this.) The other possible
element inside this configuration option is <bcc/> which can be used
multiple times. Inside the <bcc/> element you can place JabberIDs.
All local presences are send to the configured JabberIDs as a copy.
This can be used to forward presence to a component, that needs to know
presence of all local users. (E.g. another way to implement a web presence
indicator.)
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:regtimeout
This configures the number of seconds an account gets blocked against
reregistration after it has been unregistered. The value is specified
as the timeout attribute of this element.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:serialization
With this setting the session manager can be configured to store all
necessary state information to restart the session manager to a file.
This can be used to restart the session manager after a crash (or after
it has been killed by a signal) without the user's sessions to be
dropped. This can be used to reconfigure the session manager while
it is running. Please note, that on very big jabberd14 installations
you might get problems if you serialize the state to often.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/jsm:vcard2jud
If the vCard a users sets should be forwarded to the first Jabber users
directory, that is configured in cfg:jabber/cfg:service/jsm:jsm/browse:browse.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/register:register
Reply stanza to a jabber:iq:register get request. This configures what
a client gets asked, if a user tries an inband account registration.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/vcard:vCard
The vCard, that gets returned, if a Jabber entity requests a vCard
for the server. No default value.
.TP
.B jsm setting: cfg:jabber/cfg:service/jsm:jsm/welcome
A message stanza, that should be sent to a new user. The content of the
welcome element is used as the content of the generated message stanza.
Therefore you should have a body element inside this one, and a subject
element might be good to have as well. It is possible to use xml:lang
attributes for the content of this element. No default setting, if
element is missing, no welcome message is generated.
.SH AUTHOR
Jabber Software Foundation
